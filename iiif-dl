#!/usr/bin/env python3
# Copyright (C) 2024 J. Nathanael Philipp (jnphilipp) <nathanael@philipp.land>
# iiif-dl download images from a IIIF-server.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import logging
import requests
import sys

from argparse import (
    ArgumentDefaultsHelpFormatter,
    ArgumentParser,
    ArgumentTypeError,
    RawTextHelpFormatter,
)
from pathlib import Path


__author__ = "J. Nathanael Philipp (jnphilipp)"
__copyright__ = "Copyright 2024 J. Nathanael Philipp (jnphilipp)"
__email__ = "nathanael@philipp.land"
__license__ = "GPLv3"
__version__ = "0.1.0"
__github__ = "https://github.com/jnphilipp/iiif-dl"


VERSION = (
    f"%(prog)s v{__version__}\n{__copyright__}\n"
    + "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>."
    + "\nThis is free software: you are free to change and redistribute it.\n"
    + "There is NO WARRANTY, to the extent permitted by law.\n\n"
    + f"Report bugs to {__github__}/issues."
    + f"\nWritten by {__author__} <{__email__}>"
)


class ArgFormatter(ArgumentDefaultsHelpFormatter, RawTextHelpFormatter):
    """Combination of ArgumentDefaultsHelpFormatter and RawTextHelpFormatter."""

    pass


def dir_path(s: str) -> Path:
    p = Path(s)
    if p.exists() and p.is_dir():
        return p
    else:
        raise ArgumentTypeError(f"Path is not a directory or does not exist: '{s}'")


def download_image(url: str, img_format: str, path: Path):
    logging.info(f"Download image {path.stem} as {img_format}.")
    logging.debug(f"Save image to {path}.")
    r = requests.get(f"{url}/full/full/0/default.{img_format}")
    r.raise_for_status()
    with open(path, "wb") as f:
        f.write(r.content)


def filter_info(rec: logging.LogRecord) -> bool:
    """Log record filter for info and lower levels.

    Args:
     * rec: LogRecord object
    """
    return rec.levelno <= logging.INFO


if __name__ == "__main__":
    parser = ArgumentParser(prog="fpb-workflow", formatter_class=ArgFormatter)
    parser.add_argument("-V", "--version", action="version", version=VERSION)

    parser.add_argument("--manifest-url", help="download all files from a manifest.")
    parser.add_argument("--info-url", help="download single image from a info.")

    parser.add_argument("--format", default="jpg", help="image format")
    parser.add_argument(
        "--target-dir",
        required=True,
        type=dir_path,
        help="folder to save images to.",
    )

    parser.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        help="verbosity level; multiple times increases the level, the maximum is 3, "
        + "for debugging.",
    )
    parser.add_argument(
        "--log-format",
        default="[%(levelname)s] %(message)s",
        help="set logging format.",
    )
    parser.add_argument(
        "--log-file",
        type=lambda p: Path(p).absolute(),
        help="log output to a file.",
    )

    args = parser.parse_args()

    if args.verbose == 0:
        level = logging.WARNING
    elif args.verbose == 1:
        level = logging.INFO
    else:
        level = logging.DEBUG

    handlers: list[logging.Handler] = []
    stdout_handler = logging.StreamHandler(sys.stdout)
    stdout_handler.setLevel(level)
    stdout_handler.addFilter(filter_info)
    handlers.append(stdout_handler)

    stderr_handler = logging.StreamHandler(sys.stderr)
    stderr_handler.setLevel(logging.WARNING)
    if "%(levelname)s" not in args.log_format:
        stderr_handler.setFormatter(
            logging.Formatter(f"[%(levelname)s] {args.log_format}")
        )
    handlers.append(stderr_handler)

    if args.log_file:
        file_handler = logging.FileHandler(args.log_file)
        file_handler.setLevel(level)
        if args.log_file_format:
            file_handler.setFormatter(logging.Formatter(args.log_file_format))
        handlers.append(file_handler)

    logging.basicConfig(
        format=args.log_format,
        level=logging.DEBUG,
        handlers=handlers,
    )

    if args.manifest_url:
        r = requests.get(args.manifest_url)
        r.raise_for_status()
        for i in r.json()["sequences"][0]["canvases"]:
            path = args.target_dir / f"{i['label'].replace(':', '_')}.{args.format}"
            if path.exists():
                print(path.name)
                continue
            download_image(
                i["images"][0]["resource"]["@id"],
                args.format,
                path,
            )
    elif args.info_url:
        download_image(
            args.info_url,
            args.format,
            args.target_dir / f"{args.info_url}.{args.format}",
        )
    else:
        parser.print_help()
